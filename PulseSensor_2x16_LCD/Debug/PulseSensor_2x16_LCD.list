
PulseSensor_2x16_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a4  080041a4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ac  080041ac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080041b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000344  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d667  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fcf  00000000  00000000  0002d736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d98  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a9e  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022695  00000000  00000000  00030f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010d1e  00000000  00000000  000535d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6df0  00000000  00000000  000642f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e8c  00000000  00000000  0013b0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0013ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800412c 	.word	0x0800412c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800412c 	.word	0x0800412c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <i2c_lcd_send_data>:
uint8_t bpm,nabiz;
uint16_t adc_value,temp,dizi[100],sayac=0;
char data[32];

void i2c_lcd_send_data(int nabiz)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	lcd_clear();
 8000574:	f000 f90a 	bl	800078c <lcd_clear>
	sprintf(data,"Ortalama  Nabiz:%d",nabiz);
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4905      	ldr	r1, [pc, #20]	; (8000590 <i2c_lcd_send_data+0x24>)
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <i2c_lcd_send_data+0x28>)
 800057e:	f003 f931 	bl	80037e4 <siprintf>
	lcd_send_string(data);
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <i2c_lcd_send_data+0x28>)
 8000584:	f000 f956 	bl	8000834 <lcd_send_string>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	08004144 	.word	0x08004144
 8000594:	2000014c 	.word	0x2000014c

08000598 <adcRead>:


void adcRead()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800059e:	4842      	ldr	r0, [pc, #264]	; (80006a8 <adcRead+0x110>)
 80005a0:	f000 fd4a 	bl	8001038 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 1000)==HAL_OK)
 80005a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a8:	483f      	ldr	r0, [pc, #252]	; (80006a8 <adcRead+0x110>)
 80005aa:	f000 fe4a 	bl	8001242 <HAL_ADC_PollForConversion>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d128      	bne.n	8000606 <adcRead+0x6e>
	{
		adc_value=HAL_ADC_GetValue(&hadc1);
 80005b4:	483c      	ldr	r0, [pc, #240]	; (80006a8 <adcRead+0x110>)
 80005b6:	f000 fecf 	bl	8001358 <HAL_ADC_GetValue>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b3b      	ldr	r3, [pc, #236]	; (80006ac <adcRead+0x114>)
 80005c0:	801a      	strh	r2, [r3, #0]
		temp=3300*adc_value/4095;
 80005c2:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <adcRead+0x114>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80005cc:	fb02 f303 	mul.w	r3, r2, r3
 80005d0:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <adcRead+0x118>)
 80005d2:	fb82 1203 	smull	r1, r2, r2, r3
 80005d6:	441a      	add	r2, r3
 80005d8:	12d2      	asrs	r2, r2, #11
 80005da:	17db      	asrs	r3, r3, #31
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <adcRead+0x11c>)
 80005e2:	801a      	strh	r2, [r3, #0]
		dizi[sayac++]=adc_value;
 80005e4:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <adcRead+0x120>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	b291      	uxth	r1, r2
 80005ec:	4a32      	ldr	r2, [pc, #200]	; (80006b8 <adcRead+0x120>)
 80005ee:	8011      	strh	r1, [r2, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <adcRead+0x114>)
 80005f4:	8819      	ldrh	r1, [r3, #0]
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <adcRead+0x124>)
 80005f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	482f      	ldr	r0, [pc, #188]	; (80006c0 <adcRead+0x128>)
 8000602:	f001 fb83 	bl	8001d0c <HAL_GPIO_TogglePin>
	}
	HAL_ADC_Stop(&hadc1);
 8000606:	4828      	ldr	r0, [pc, #160]	; (80006a8 <adcRead+0x110>)
 8000608:	f000 fde8 	bl	80011dc <HAL_ADC_Stop>
	if(sayac>=300)
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <adcRead+0x120>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000614:	d33e      	bcc.n	8000694 <adcRead+0xfc>
	{
		for(int i=1;i<300;i++)
 8000616:	2301      	movs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e026      	b.n	800066a <adcRead+0xd2>
		{
			if(dizi[i]>dizi[i+1] && dizi[i]>dizi[i-1] && dizi[i]>THRESOLD )
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <adcRead+0x124>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	4924      	ldr	r1, [pc, #144]	; (80006bc <adcRead+0x124>)
 800062a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800062e:	429a      	cmp	r2, r3
 8000630:	d918      	bls.n	8000664 <adcRead+0xcc>
 8000632:	4a22      	ldr	r2, [pc, #136]	; (80006bc <adcRead+0x124>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3b01      	subs	r3, #1
 800063e:	491f      	ldr	r1, [pc, #124]	; (80006bc <adcRead+0x124>)
 8000640:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000644:	429a      	cmp	r2, r3
 8000646:	d90d      	bls.n	8000664 <adcRead+0xcc>
 8000648:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <adcRead+0x124>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000650:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000654:	4293      	cmp	r3, r2
 8000656:	d905      	bls.n	8000664 <adcRead+0xcc>
			{
				bpm++;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <adcRead+0x12c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <adcRead+0x12c>)
 8000662:	701a      	strb	r2, [r3, #0]
		for(int i=1;i<300;i++)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000670:	dbd4      	blt.n	800061c <adcRead+0x84>
			}
		}

		sayac=0;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <adcRead+0x120>)
 8000674:	2200      	movs	r2, #0
 8000676:	801a      	strh	r2, [r3, #0]
		nabiz=bpm*20;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <adcRead+0x12c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <adcRead+0x130>)
 8000688:	701a      	strb	r2, [r3, #0]
		i2c_lcd_send_data(nabiz);
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <adcRead+0x130>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff6c 	bl	800056c <i2c_lcd_send_data>
	}

	bpm=0;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <adcRead+0x12c>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	nabiz=0;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <adcRead+0x130>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]

}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000016c 	.word	0x2000016c
 80006ac:	2000007a 	.word	0x2000007a
 80006b0:	80080081 	.word	0x80080081
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	20000148 	.word	0x20000148
 80006bc:	20000080 	.word	0x20000080
 80006c0:	40020c00 	.word	0x40020c00
 80006c4:	20000078 	.word	0x20000078
 80006c8:	20000079 	.word	0x20000079

080006cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f023 030f 	bic.w	r3, r3, #15
 80006dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f043 030c 	orr.w	r3, r3, #12
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	f043 030c 	orr.w	r3, r3, #12
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b2db      	uxtb	r3, r3
 800070a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800070c:	f107 0208 	add.w	r2, r7, #8
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2304      	movs	r3, #4
 8000716:	214e      	movs	r1, #78	; 0x4e
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <lcd_send_cmd+0x5c>)
 800071a:	f001 fc55 	bl	8001fc8 <HAL_I2C_Master_Transmit>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001b4 	.word	0x200001b4

0800072c <lcd_send_data>:

void lcd_send_data (char data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af02      	add	r7, sp, #8
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f023 030f 	bic.w	r3, r3, #15
 800073c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f043 030d 	orr.w	r3, r3, #13
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	f043 0309 	orr.w	r3, r3, #9
 8000754:	b2db      	uxtb	r3, r3
 8000756:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	f043 030d 	orr.w	r3, r3, #13
 800075e:	b2db      	uxtb	r3, r3
 8000760:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	f043 0309 	orr.w	r3, r3, #9
 8000768:	b2db      	uxtb	r3, r3
 800076a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800076c:	f107 0208 	add.w	r2, r7, #8
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2304      	movs	r3, #4
 8000776:	214e      	movs	r1, #78	; 0x4e
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <lcd_send_data+0x5c>)
 800077a:	f001 fc25 	bl	8001fc8 <HAL_I2C_Master_Transmit>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001b4 	.word	0x200001b4

0800078c <lcd_clear>:

void lcd_clear (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	f7ff ff9a 	bl	80006cc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	e005      	b.n	80007aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800079e:	2020      	movs	r0, #32
 80007a0:	f7ff ffc4 	bl	800072c <lcd_send_data>
	for (int i=0; i<70; i++)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b45      	cmp	r3, #69	; 0x45
 80007ae:	ddf6      	ble.n	800079e <lcd_clear+0x12>
	}
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007be:	2032      	movs	r0, #50	; 0x32
 80007c0:	f000 fbd2 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007c4:	2030      	movs	r0, #48	; 0x30
 80007c6:	f7ff ff81 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80007ca:	2005      	movs	r0, #5
 80007cc:	f000 fbcc 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007d0:	2030      	movs	r0, #48	; 0x30
 80007d2:	f7ff ff7b 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 fbc6 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007dc:	2030      	movs	r0, #48	; 0x30
 80007de:	f7ff ff75 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fbc0 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80007e8:	2020      	movs	r0, #32
 80007ea:	f7ff ff6f 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 fbba 	bl	8000f68 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f7ff ff69 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 fbb4 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000800:	2008      	movs	r0, #8
 8000802:	f7ff ff63 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f000 fbae 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ff5d 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fba8 	bl	8000f68 <HAL_Delay>
	HAL_Delay(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 fba5 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800081e:	2006      	movs	r0, #6
 8000820:	f7ff ff54 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 fb9f 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800082a:	200c      	movs	r0, #12
 800082c:	f7ff ff4e 	bl	80006cc <lcd_send_cmd>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800083c:	e006      	b.n	800084c <lcd_send_string+0x18>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff70 	bl	800072c <lcd_send_data>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f4      	bne.n	800083e <lcd_send_string+0xa>
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_TIM_PeriodElapsedCallback>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	adcRead();
 8000866:	f7ff fe97 	bl	8000598 <adcRead>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fb04 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f810 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f944 	bl	8000b0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000884:	f000 f8c8 	bl	8000a18 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000888:	f000 f874 	bl	8000974 <MX_ADC1_Init>
  MX_TIM2_Init();
 800088c:	f000 f8f2 	bl	8000a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000890:	f7ff ff93 	bl	80007ba <lcd_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000894:	4801      	ldr	r0, [pc, #4]	; (800089c <main+0x28>)
 8000896:	f002 fb73 	bl	8002f80 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800089a:	e7fe      	b.n	800089a <main+0x26>
 800089c:	20000208 	.word	0x20000208

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	; 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2230      	movs	r2, #48	; 0x30
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 ffb8 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <SystemClock_Config+0xcc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a27      	ldr	r2, [pc, #156]	; (800096c <SystemClock_Config+0xcc>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <SystemClock_Config+0xcc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <SystemClock_Config+0xd0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SystemClock_Config+0xd0>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <SystemClock_Config+0xd0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000910:	2308      	movs	r3, #8
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000914:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800091e:	2307      	movs	r3, #7
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fe56 	bl	80025d8 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000932:	f000 f921 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2105      	movs	r1, #5
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f8b7 	bl	8002ac8 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000960:	f000 f90a 	bl	8000b78 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3750      	adds	r7, #80	; 0x50
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_ADC1_Init+0x98>)
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <MX_ADC1_Init+0x9c>)
 800098a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_ADC1_Init+0x98>)
 800098e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000992:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_ADC1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_ADC1_Init+0xa0>)
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009d6:	f000 faeb 	bl	8000fb0 <HAL_ADC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009e0:	f000 f8ca 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_ADC1_Init+0x98>)
 80009f6:	f000 fcbd 	bl	8001374 <HAL_ADC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a00:	f000 f8ba 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000016c 	.word	0x2000016c
 8000a10:	40012000 	.word	0x40012000
 8000a14:	0f000001 	.word	0x0f000001

08000a18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <MX_I2C1_Init+0x54>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x58>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_I2C1_Init+0x50>)
 8000a56:	f001 f973 	bl	8001d40 <HAL_I2C_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a60:	f000 f88a 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001b4 	.word	0x200001b4
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	00061a80 	.word	0x00061a80

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000a9a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000aa8:	2213      	movs	r2, #19
 8000aaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000aba:	f002 fa11 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ac4:	f000 f858 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000ad6:	f002 fbcb 	bl	8003270 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 f84a 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_TIM2_Init+0x94>)
 8000af2:	f002 fde7 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f83c 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000208 	.word	0x20000208

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_GPIO_Init+0x68>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 fec4 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <HAL_ADC_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_ADC_MspInit+0x80>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_ADC_MspInit+0x84>)
 8000c42:	f000 fec7 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012000 	.word	0x40012000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23c0      	movs	r3, #192	; 0xc0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9e:	2312      	movs	r3, #18
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000caa:	2304      	movs	r3, #4
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <HAL_I2C_MspInit+0x8c>)
 8000cb6:	f000 fe8d 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_I2C_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d115      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_TIM_Base_MspInit+0x48>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_TIM_Base_MspInit+0x48>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	201c      	movs	r0, #28
 8000d20:	f000 fe21 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d24:	201c      	movs	r0, #28
 8000d26:	f000 fe3a 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f8d0 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM2_IRQHandler+0x10>)
 8000d92:	f002 f965 	bl	8003060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000208 	.word	0x20000208

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f002 fd30 	bl	8003834 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	20000250 	.word	0x20000250
 8000e08:	200003a0 	.word	0x200003a0

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 fcef 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fd07 	bl	8000874 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e74:	080041b4 	.word	0x080041b4
  ldr r2, =_sbss
 8000e78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e7c:	200003a0 	.word	0x200003a0

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 fd4f 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fe64 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd67 	bl	80019ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fd2f 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000254 	.word	0x20000254

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000254 	.word	0x20000254

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e033      	b.n	800102e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fe00 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0202 	orr.w	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fad8 	bl	80015b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	e001      	b.n	8001024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Start+0x1a>
 800104e:	2302      	movs	r3, #2
 8001050:	e0b2      	b.n	80011b8 <HAL_ADC_Start+0x180>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d018      	beq.n	800109a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001078:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_ADC_Start+0x18c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_ADC_Start+0x190>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9a      	lsrs	r2, r3, #18
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800108c:	e002      	b.n	8001094 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3b01      	subs	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d17a      	bne.n	800119e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e6:	d106      	bne.n	80010f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f023 0206 	bic.w	r2, r3, #6
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_ADC_Start+0x194>)
 8001106:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001110:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	2b00      	cmp	r3, #0
 800111c:	d12a      	bne.n	8001174 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2b      	ldr	r2, [pc, #172]	; (80011d0 <HAL_ADC_Start+0x198>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d015      	beq.n	8001154 <HAL_ADC_Start+0x11c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_ADC_Start+0x19c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d105      	bne.n	800113e <HAL_ADC_Start+0x106>
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_ADC_Start+0x194>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <HAL_ADC_Start+0x1a0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d136      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_ADC_Start+0x194>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d130      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d129      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	e020      	b.n	80011b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_ADC_Start+0x198>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11b      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d114      	bne.n	80011b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e00b      	b.n	80011b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20000000 	.word	0x20000000
 80011c8:	431bde83 	.word	0x431bde83
 80011cc:	40012300 	.word	0x40012300
 80011d0:	40012000 	.word	0x40012000
 80011d4:	40012100 	.word	0x40012100
 80011d8:	40012200 	.word	0x40012200

080011dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Stop+0x16>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e021      	b.n	8001236 <HAL_ADC_Stop+0x5a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d113      	bne.n	8001288 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800126a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f043 0220 	orr.w	r2, r3, #32
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e063      	b.n	8001350 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001288:	f7ff fe62 	bl	8000f50 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800128e:	e021      	b.n	80012d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001296:	d01d      	beq.n	80012d4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <HAL_ADC_PollForConversion+0x6c>
 800129e:	f7ff fe57 	bl	8000f50 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d212      	bcs.n	80012d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d00b      	beq.n	80012d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f043 0204 	orr.w	r2, r3, #4
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e03d      	b.n	8001350 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d1d6      	bne.n	8001290 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f06f 0212 	mvn.w	r2, #18
 80012ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d123      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11f      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001326:	2b00      	cmp	r3, #0
 8001328:	d111      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1c>
 800138c:	2302      	movs	r3, #2
 800138e:	e105      	b.n	800159c <HAL_ADC_ConfigChannel+0x228>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b09      	cmp	r3, #9
 800139e:	d925      	bls.n	80013ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68d9      	ldr	r1, [r3, #12]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	3b1e      	subs	r3, #30
 80013b6:	2207      	movs	r2, #7
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43da      	mvns	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	400a      	ands	r2, r1
 80013c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	4603      	mov	r3, r0
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4403      	add	r3, r0
 80013de:	3b1e      	subs	r3, #30
 80013e0:	409a      	lsls	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	e022      	b.n	8001432 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6919      	ldr	r1, [r3, #16]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	2207      	movs	r2, #7
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	4603      	mov	r3, r0
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4403      	add	r3, r0
 8001428:	409a      	lsls	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b06      	cmp	r3, #6
 8001438:	d824      	bhi.n	8001484 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b05      	subs	r3, #5
 800144c:	221f      	movs	r2, #31
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b05      	subs	r3, #5
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e04c      	b.n	800151e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d824      	bhi.n	80014d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	3b23      	subs	r3, #35	; 0x23
 800149e:	221f      	movs	r2, #31
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43da      	mvns	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	400a      	ands	r2, r1
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b23      	subs	r3, #35	; 0x23
 80014c8:	fa00 f203 	lsl.w	r2, r0, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
 80014d4:	e023      	b.n	800151e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b41      	subs	r3, #65	; 0x41
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	400a      	ands	r2, r1
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b41      	subs	r3, #65	; 0x41
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_ADC_ConfigChannel+0x234>)
 8001520:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	; (80015ac <HAL_ADC_ConfigChannel+0x238>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d109      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1cc>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d105      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_ADC_ConfigChannel+0x238>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d123      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b10      	cmp	r3, #16
 8001550:	d003      	beq.n	800155a <HAL_ADC_ConfigChannel+0x1e6>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b11      	cmp	r3, #17
 8001558:	d11b      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d111      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_ADC_ConfigChannel+0x23c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_ADC_ConfigChannel+0x240>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9a      	lsrs	r2, r3, #18
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3b01      	subs	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	40012000 	.word	0x40012000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c0:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <ADC_Init+0x1f0>)
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	021a      	lsls	r2, r3, #8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	4a58      	ldr	r2, [pc, #352]	; (80017ac <ADC_Init+0x1f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d022      	beq.n	8001696 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800165e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e00f      	b.n	80016b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0202 	bic.w	r2, r2, #2
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e1b      	ldrb	r3, [r3, #24]
 80016d0:	005a      	lsls	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01b      	beq.n	800171c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001702:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	3b01      	subs	r3, #1
 8001710:	035a      	lsls	r2, r3, #13
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e007      	b.n	800172c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	3b01      	subs	r3, #1
 8001748:	051a      	lsls	r2, r3, #20
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800176e:	025a      	lsls	r2, r3, #9
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	029a      	lsls	r2, r3, #10
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40012300 	.word	0x40012300
 80017ac:	0f000001 	.word	0x0f000001

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e16b      	b.n	8001cc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 815a 	bne.w	8001cc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d005      	beq.n	8001a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d130      	bne.n	8001a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d017      	beq.n	8001ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	69b9      	ldr	r1, [r7, #24]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80b4 	beq.w	8001cc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b76:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <HAL_GPIO_Init+0x310>)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_GPIO_Init+0x314>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02b      	beq.n	8001bfa <HAL_GPIO_Init+0x226>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a51      	ldr	r2, [pc, #324]	; (8001cec <HAL_GPIO_Init+0x318>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x222>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x21e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <HAL_GPIO_Init+0x320>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x21a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4e      	ldr	r2, [pc, #312]	; (8001cf8 <HAL_GPIO_Init+0x324>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x216>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4d      	ldr	r2, [pc, #308]	; (8001cfc <HAL_GPIO_Init+0x328>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x32c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <HAL_GPIO_Init+0x330>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x20a>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00e      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bde:	2308      	movs	r3, #8
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001be2:	2306      	movs	r3, #6
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x228>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x310>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f ae90 	bls.w	80019f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40021400 	.word	0x40021400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40021c00 	.word	0x40021c00
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43d9      	mvns	r1, r3
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e12b      	b.n	8001faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe ff78 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f001 f888 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a81      	ldr	r2, [pc, #516]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a80      	ldr	r2, [pc, #512]	; (8001fb8 <HAL_I2C_Init+0x278>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	; (8001fbc <HAL_I2C_Init+0x27c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0e7      	b.n	8001faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a78      	ldr	r2, [pc, #480]	; (8001fc0 <HAL_I2C_Init+0x280>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_I2C_Init+0x284>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	495c      	ldr	r1, [pc, #368]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d819      	bhi.n	8001e7c <HAL_I2C_Init+0x13c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_I2C_Init+0x138>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e59      	subs	r1, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	e051      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e04f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_I2C_Init+0x168>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e012      	b.n	8001ece <HAL_I2C_Init+0x18e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x196>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e022      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <HAL_I2C_Init+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e58      	subs	r0, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efa:	e00f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6911      	ldr	r1, [r2, #16]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	000186a0 	.word	0x000186a0
 8001fb8:	001e847f 	.word	0x001e847f
 8001fbc:	003d08ff 	.word	0x003d08ff
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7fe ffb8 	bl	8000f50 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 80e0 	bne.w	80021b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4970      	ldr	r1, [pc, #448]	; (80021bc <HAL_I2C_Master_Transmit+0x1f4>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f964 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	e0d3      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Master_Transmit+0x50>
 8002014:	2302      	movs	r3, #2
 8002016:	e0cc      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d007      	beq.n	800203e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2210      	movs	r2, #16
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	893a      	ldrh	r2, [r7, #8]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002080:	8979      	ldrh	r1, [r7, #10]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f89c 	bl	80021c4 <I2C_MasterRequestWrite>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e08d      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020ac:	e066      	b.n	800217c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f9de 	bl	8002474 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d107      	bne.n	80020d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06b      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d11b      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x188>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d017      	beq.n	8002150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6a39      	ldr	r1, [r7, #32]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f9ce 	bl	80024f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e01a      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d194      	bne.n	80020ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	00100002 	.word	0x00100002
 80021c0:	ffff0000 	.word	0xffff0000

080021c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	460b      	mov	r3, r1
 80021d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d006      	beq.n	80021ee <I2C_MasterRequestWrite+0x2a>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d003      	beq.n	80021ee <I2C_MasterRequestWrite+0x2a>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021ec:	d108      	bne.n	8002200 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e00b      	b.n	8002218 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	2b12      	cmp	r3, #18
 8002206:	d107      	bne.n	8002218 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f84f 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223e:	d103      	bne.n	8002248 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e035      	b.n	80022b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002254:	d108      	bne.n	8002268 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002256:	897b      	ldrh	r3, [r7, #10]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002264:	611a      	str	r2, [r3, #16]
 8002266:	e01b      	b.n	80022a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002268:	897b      	ldrh	r3, [r7, #10]
 800226a:	11db      	asrs	r3, r3, #7
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0306 	and.w	r3, r3, #6
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f063 030f 	orn	r3, r3, #15
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <I2C_MasterRequestWrite+0xfc>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f875 	bl	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e010      	b.n	80022b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <I2C_MasterRequestWrite+0x100>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f865 	bl	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	00010008 	.word	0x00010008
 80022c4:	00010002 	.word	0x00010002

080022c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d8:	e025      	b.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d021      	beq.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe fe35 	bl	8000f50 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d116      	bne.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e023      	b.n	800236e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10d      	bne.n	800234c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4013      	ands	r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	e00c      	b.n	8002366 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	429a      	cmp	r2, r3
 800236a:	d0b6      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002384:	e051      	b.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002394:	d123      	bne.n	80023de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f043 0204 	orr.w	r2, r3, #4
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e046      	b.n	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d021      	beq.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7fe fdb3 	bl	8000f50 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d116      	bne.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f043 0220 	orr.w	r2, r3, #32
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e020      	b.n	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d10c      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4013      	ands	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	e00b      	b.n	8002466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d18d      	bne.n	8002386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002480:	e02d      	b.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f878 	bl	8002578 <I2C_IsAcknowledgeFailed>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e02d      	b.n	80024ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d021      	beq.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7fe fd59 	bl	8000f50 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e007      	b.n	80024ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d1ca      	bne.n	8002482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002502:	e02d      	b.n	8002560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f837 	bl	8002578 <I2C_IsAcknowledgeFailed>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02d      	b.n	8002570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d021      	beq.n	8002560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251c:	f7fe fd18 	bl	8000f50 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	429a      	cmp	r2, r3
 800252a:	d302      	bcc.n	8002532 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e007      	b.n	8002570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d1ca      	bne.n	8002504 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258e:	d11b      	bne.n	80025c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002598:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e267      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	4b88      	ldr	r3, [pc, #544]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b85      	ldr	r3, [pc, #532]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d112      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d10b      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d157      	bne.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e242      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x74>
 800263e:	4b76      	ldr	r3, [pc, #472]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a75      	ldr	r2, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b70      	ldr	r3, [pc, #448]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6f      	ldr	r2, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b6d      	ldr	r3, [pc, #436]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6c      	ldr	r2, [pc, #432]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 8002670:	4b69      	ldr	r3, [pc, #420]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a68      	ldr	r2, [pc, #416]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fc5e 	bl	8000f50 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002698:	f7fe fc5a 	bl	8000f50 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e207      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xc0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fc4a 	bl	8000f50 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe fc46 	bl	8000f50 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1f3      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b51      	ldr	r3, [pc, #324]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	4b4a      	ldr	r3, [pc, #296]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b44      	ldr	r3, [pc, #272]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c7      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4937      	ldr	r1, [pc, #220]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x244>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fbff 	bl	8000f50 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe fbfb 	bl	8000f50 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1a8      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4925      	ldr	r1, [pc, #148]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_OscConfig+0x244>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fbde 	bl	8000f50 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe fbda 	bl	8000f50 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e187      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d036      	beq.n	8002830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_RCC_OscConfig+0x248>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fbbe 	bl	8000f50 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fbba 	bl	8000f50 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e167      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x200>
 80027f6:	e01b      	b.n	8002830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_OscConfig+0x248>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fba7 	bl	8000f50 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e00e      	b.n	8002824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fba3 	bl	8000f50 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d907      	bls.n	8002824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e150      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002818:	40023800 	.word	0x40023800
 800281c:	42470000 	.word	0x42470000
 8002820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ea      	bne.n	8002806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8097 	beq.w	800296c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b7d      	ldr	r3, [pc, #500]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a7c      	ldr	r2, [pc, #496]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b7a      	ldr	r3, [pc, #488]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b74      	ldr	r3, [pc, #464]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a73      	ldr	r2, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fe fb63 	bl	8000f50 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fb5f 	bl	8000f50 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e10c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x474>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2ea>
 80028b4:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a63      	ldr	r2, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x30c>
 80028ca:	4b5f      	ldr	r3, [pc, #380]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a5e      	ldr	r2, [pc, #376]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a5b      	ldr	r2, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028e4:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe fb24 	bl	8000f50 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe fb20 	bl	8000f50 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0cb      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ee      	beq.n	800290c <HAL_RCC_OscConfig+0x334>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fb0e 	bl	8000f50 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fb0a 	bl	8000f50 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0b5      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ee      	bne.n	8002938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4a38      	ldr	r2, [pc, #224]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a1 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b08      	cmp	r3, #8
 8002980:	d05c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d141      	bne.n	8002a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fade 	bl	8000f50 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fada 	bl	8000f50 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e087      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	491b      	ldr	r1, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x478>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fab3 	bl	8000f50 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe faaf 	bl	8000f50 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e05c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x416>
 8002a0c:	e054      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fa9c 	bl	8000f50 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fa98 	bl	8000f50 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e045      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x444>
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e038      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d121      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe f9ca 	bl	8000f50 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe f9c6 	bl	8000f50 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f92a 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08004158 	.word	0x08004158
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b094      	sub	sp, #80	; 0x50
 8002c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cac:	4b79      	ldr	r3, [pc, #484]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	f200 80e1 	bhi.w	8002e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc6:	e0db      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b73      	ldr	r3, [pc, #460]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ccc:	e0db      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd2:	e0d8      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfe:	2300      	movs	r3, #0
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	0159      	lsls	r1, r3, #5
 8002d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d18:	0150      	lsls	r0, r2, #5
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4621      	mov	r1, r4
 8002d20:	1a51      	subs	r1, r2, r1
 8002d22:	6139      	str	r1, [r7, #16]
 8002d24:	4629      	mov	r1, r5
 8002d26:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d38:	4659      	mov	r1, fp
 8002d3a:	018b      	lsls	r3, r1, #6
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d42:	4651      	mov	r1, sl
 8002d44:	018a      	lsls	r2, r1, #6
 8002d46:	4651      	mov	r1, sl
 8002d48:	ebb2 0801 	subs.w	r8, r2, r1
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d66:	4690      	mov	r8, r2
 8002d68:	4699      	mov	r9, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	eb18 0303 	adds.w	r3, r8, r3
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	462b      	mov	r3, r5
 8002d74:	eb49 0303 	adc.w	r3, r9, r3
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d86:	4629      	mov	r1, r5
 8002d88:	024b      	lsls	r3, r1, #9
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d90:	4621      	mov	r1, r4
 8002d92:	024a      	lsls	r2, r1, #9
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002da4:	f7fd fa64 	bl	8000270 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db0:	e058      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	2200      	movs	r2, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	f04f 0000 	mov.w	r0, #0
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	0159      	lsls	r1, r3, #5
 8002dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dde:	0150      	lsls	r0, r2, #5
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4641      	mov	r1, r8
 8002de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dea:	4649      	mov	r1, r9
 8002dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e04:	ebb2 040a 	subs.w	r4, r2, sl
 8002e08:	eb63 050b 	sbc.w	r5, r3, fp
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	00eb      	lsls	r3, r5, #3
 8002e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1a:	00e2      	lsls	r2, r4, #3
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4643      	mov	r3, r8
 8002e22:	18e3      	adds	r3, r4, r3
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	464b      	mov	r3, r9
 8002e28:	eb45 0303 	adc.w	r3, r5, r3
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	028b      	lsls	r3, r1, #10
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e44:	4621      	mov	r1, r4
 8002e46:	028a      	lsls	r2, r1, #10
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	61fa      	str	r2, [r7, #28]
 8002e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e58:	f7fd fa0a 	bl	8000270 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e7e:	e002      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3750      	adds	r7, #80	; 0x50
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08004168 	.word	0x08004168

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fef0 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fa96 	bl	8003450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d001      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e04e      	b.n	8003036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d022      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d01d      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d018      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_TIM_Base_Start_IT+0xcc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x80>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <HAL_TIM_Base_Start_IT+0xdc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d010      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	e007      	b.n	8003034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40010000 	.word	0x40010000
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00
 8003054:	40010400 	.word	0x40010400
 8003058:	40014000 	.word	0x40014000
 800305c:	40001800 	.word	0x40001800

08003060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0202 	mvn.w	r2, #2
 800308c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9b5 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9a7 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f9b8 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0204 	mvn.w	r2, #4
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f98b 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f97d 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f98e 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b08      	cmp	r3, #8
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0208 	mvn.w	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f961 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f953 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f964 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b10      	cmp	r3, #16
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b10      	cmp	r3, #16
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0210 	mvn.w	r2, #16
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2208      	movs	r2, #8
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f937 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f929 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f93a 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0201 	mvn.w	r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fb3d 	bl	800085e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fae0 	bl	80037d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d10e      	bne.n	800323c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d107      	bne.n	800323c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8ff 	bl	800343a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b20      	cmp	r3, #32
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0220 	mvn.w	r2, #32
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 faaa 	bl	80037bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_TIM_ConfigClockSource+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e0b4      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x186>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c4:	d03e      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0xd4>
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ca:	f200 8087 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	f000 8086 	beq.w	80033e2 <HAL_TIM_ConfigClockSource+0x172>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d87f      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b70      	cmp	r3, #112	; 0x70
 80032de:	d01a      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0xa6>
 80032e0:	2b70      	cmp	r3, #112	; 0x70
 80032e2:	d87b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b60      	cmp	r3, #96	; 0x60
 80032e6:	d050      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x11a>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d877      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b50      	cmp	r3, #80	; 0x50
 80032ee:	d03c      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xfa>
 80032f0:	2b50      	cmp	r3, #80	; 0x50
 80032f2:	d873      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d058      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x13a>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d86f      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d064      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003300:	2b30      	cmp	r3, #48	; 0x30
 8003302:	d86b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d060      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d867      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05c      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	2b10      	cmp	r3, #16
 8003312:	d05a      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	e062      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f000 f9ad 	bl	8003684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	609a      	str	r2, [r3, #8]
      break;
 8003342:	e04f      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f000 f996 	bl	8003684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e03c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	461a      	mov	r2, r3
 8003378:	f000 f90a 	bl	8003590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2150      	movs	r1, #80	; 0x50
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f963 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 8003388:	e02c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	461a      	mov	r2, r3
 8003398:	f000 f929 	bl	80035ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2160      	movs	r1, #96	; 0x60
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f953 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 80033a8:	e01c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f8ea 	bl	8003590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f943 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f000 f93a 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 80033da:	e003      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e000      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a40      	ldr	r2, [pc, #256]	; (8003564 <TIM_Base_SetConfig+0x114>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d00f      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <TIM_Base_SetConfig+0x118>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00b      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3c      	ldr	r2, [pc, #240]	; (800356c <TIM_Base_SetConfig+0x11c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d007      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <TIM_Base_SetConfig+0x120>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3a      	ldr	r2, [pc, #232]	; (8003574 <TIM_Base_SetConfig+0x124>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d108      	bne.n	80034a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2f      	ldr	r2, [pc, #188]	; (8003564 <TIM_Base_SetConfig+0x114>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d02b      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d027      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <TIM_Base_SetConfig+0x118>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d023      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2b      	ldr	r2, [pc, #172]	; (800356c <TIM_Base_SetConfig+0x11c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01f      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <TIM_Base_SetConfig+0x120>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01b      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a29      	ldr	r2, [pc, #164]	; (8003574 <TIM_Base_SetConfig+0x124>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d017      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a28      	ldr	r2, [pc, #160]	; (8003578 <TIM_Base_SetConfig+0x128>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <TIM_Base_SetConfig+0x12c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00f      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <TIM_Base_SetConfig+0x130>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00b      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <TIM_Base_SetConfig+0x134>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a24      	ldr	r2, [pc, #144]	; (8003588 <TIM_Base_SetConfig+0x138>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a23      	ldr	r2, [pc, #140]	; (800358c <TIM_Base_SetConfig+0x13c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d108      	bne.n	8003514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <TIM_Base_SetConfig+0x114>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0xf8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <TIM_Base_SetConfig+0x124>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d103      	bne.n	8003550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	615a      	str	r2, [r3, #20]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40010400 	.word	0x40010400
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800
 8003584:	40001800 	.word	0x40001800
 8003588:	40001c00 	.word	0x40001c00
 800358c:	40002000 	.word	0x40002000

08003590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0201 	bic.w	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 030a 	bic.w	r3, r3, #10
 80035cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	621a      	str	r2, [r3, #32]
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0210 	bic.w	r2, r3, #16
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800362a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	f043 0307 	orr.w	r3, r3, #7
 8003670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800369e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d8:	2302      	movs	r3, #2
 80036da:	e05a      	b.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d01d      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10c      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40010400 	.word	0x40010400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40001800 	.word	0x40001800

080037bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <siprintf>:
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	b500      	push	{lr}
 80037e8:	b09c      	sub	sp, #112	; 0x70
 80037ea:	ab1d      	add	r3, sp, #116	; 0x74
 80037ec:	9002      	str	r0, [sp, #8]
 80037ee:	9006      	str	r0, [sp, #24]
 80037f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037f4:	4809      	ldr	r0, [pc, #36]	; (800381c <siprintf+0x38>)
 80037f6:	9107      	str	r1, [sp, #28]
 80037f8:	9104      	str	r1, [sp, #16]
 80037fa:	4909      	ldr	r1, [pc, #36]	; (8003820 <siprintf+0x3c>)
 80037fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003800:	9105      	str	r1, [sp, #20]
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	a902      	add	r1, sp, #8
 8003808:	f000 f992 	bl	8003b30 <_svfiprintf_r>
 800380c:	9b02      	ldr	r3, [sp, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	b01c      	add	sp, #112	; 0x70
 8003814:	f85d eb04 	ldr.w	lr, [sp], #4
 8003818:	b003      	add	sp, #12
 800381a:	4770      	bx	lr
 800381c:	20000058 	.word	0x20000058
 8003820:	ffff0208 	.word	0xffff0208

08003824 <memset>:
 8003824:	4402      	add	r2, r0
 8003826:	4603      	mov	r3, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000058 	.word	0x20000058

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	; (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	; (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	; (8003884 <__libc_init_array+0x44>)
 8003854:	f000 fc6a 	bl	800412c <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080041ac 	.word	0x080041ac
 800387c:	080041ac 	.word	0x080041ac
 8003880:	080041ac 	.word	0x080041ac
 8003884:	080041b0 	.word	0x080041b0

08003888 <__retarget_lock_acquire_recursive>:
 8003888:	4770      	bx	lr

0800388a <__retarget_lock_release_recursive>:
 800388a:	4770      	bx	lr

0800388c <_free_r>:
 800388c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800388e:	2900      	cmp	r1, #0
 8003890:	d044      	beq.n	800391c <_free_r+0x90>
 8003892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003896:	9001      	str	r0, [sp, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f1a1 0404 	sub.w	r4, r1, #4
 800389e:	bfb8      	it	lt
 80038a0:	18e4      	addlt	r4, r4, r3
 80038a2:	f000 f8df 	bl	8003a64 <__malloc_lock>
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <_free_r+0x94>)
 80038a8:	9801      	ldr	r0, [sp, #4]
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	b933      	cbnz	r3, 80038bc <_free_r+0x30>
 80038ae:	6063      	str	r3, [r4, #4]
 80038b0:	6014      	str	r4, [r2, #0]
 80038b2:	b003      	add	sp, #12
 80038b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038b8:	f000 b8da 	b.w	8003a70 <__malloc_unlock>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d908      	bls.n	80038d2 <_free_r+0x46>
 80038c0:	6825      	ldr	r5, [r4, #0]
 80038c2:	1961      	adds	r1, r4, r5
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf01      	itttt	eq
 80038c8:	6819      	ldreq	r1, [r3, #0]
 80038ca:	685b      	ldreq	r3, [r3, #4]
 80038cc:	1949      	addeq	r1, r1, r5
 80038ce:	6021      	streq	r1, [r4, #0]
 80038d0:	e7ed      	b.n	80038ae <_free_r+0x22>
 80038d2:	461a      	mov	r2, r3
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	b10b      	cbz	r3, 80038dc <_free_r+0x50>
 80038d8:	42a3      	cmp	r3, r4
 80038da:	d9fa      	bls.n	80038d2 <_free_r+0x46>
 80038dc:	6811      	ldr	r1, [r2, #0]
 80038de:	1855      	adds	r5, r2, r1
 80038e0:	42a5      	cmp	r5, r4
 80038e2:	d10b      	bne.n	80038fc <_free_r+0x70>
 80038e4:	6824      	ldr	r4, [r4, #0]
 80038e6:	4421      	add	r1, r4
 80038e8:	1854      	adds	r4, r2, r1
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	d1e0      	bne.n	80038b2 <_free_r+0x26>
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	6053      	str	r3, [r2, #4]
 80038f6:	440c      	add	r4, r1
 80038f8:	6014      	str	r4, [r2, #0]
 80038fa:	e7da      	b.n	80038b2 <_free_r+0x26>
 80038fc:	d902      	bls.n	8003904 <_free_r+0x78>
 80038fe:	230c      	movs	r3, #12
 8003900:	6003      	str	r3, [r0, #0]
 8003902:	e7d6      	b.n	80038b2 <_free_r+0x26>
 8003904:	6825      	ldr	r5, [r4, #0]
 8003906:	1961      	adds	r1, r4, r5
 8003908:	428b      	cmp	r3, r1
 800390a:	bf04      	itt	eq
 800390c:	6819      	ldreq	r1, [r3, #0]
 800390e:	685b      	ldreq	r3, [r3, #4]
 8003910:	6063      	str	r3, [r4, #4]
 8003912:	bf04      	itt	eq
 8003914:	1949      	addeq	r1, r1, r5
 8003916:	6021      	streq	r1, [r4, #0]
 8003918:	6054      	str	r4, [r2, #4]
 800391a:	e7ca      	b.n	80038b2 <_free_r+0x26>
 800391c:	b003      	add	sp, #12
 800391e:	bd30      	pop	{r4, r5, pc}
 8003920:	20000398 	.word	0x20000398

08003924 <sbrk_aligned>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4e0e      	ldr	r6, [pc, #56]	; (8003960 <sbrk_aligned+0x3c>)
 8003928:	460c      	mov	r4, r1
 800392a:	6831      	ldr	r1, [r6, #0]
 800392c:	4605      	mov	r5, r0
 800392e:	b911      	cbnz	r1, 8003936 <sbrk_aligned+0x12>
 8003930:	f000 fba6 	bl	8004080 <_sbrk_r>
 8003934:	6030      	str	r0, [r6, #0]
 8003936:	4621      	mov	r1, r4
 8003938:	4628      	mov	r0, r5
 800393a:	f000 fba1 	bl	8004080 <_sbrk_r>
 800393e:	1c43      	adds	r3, r0, #1
 8003940:	d00a      	beq.n	8003958 <sbrk_aligned+0x34>
 8003942:	1cc4      	adds	r4, r0, #3
 8003944:	f024 0403 	bic.w	r4, r4, #3
 8003948:	42a0      	cmp	r0, r4
 800394a:	d007      	beq.n	800395c <sbrk_aligned+0x38>
 800394c:	1a21      	subs	r1, r4, r0
 800394e:	4628      	mov	r0, r5
 8003950:	f000 fb96 	bl	8004080 <_sbrk_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d101      	bne.n	800395c <sbrk_aligned+0x38>
 8003958:	f04f 34ff 	mov.w	r4, #4294967295
 800395c:	4620      	mov	r0, r4
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	2000039c 	.word	0x2000039c

08003964 <_malloc_r>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	1ccd      	adds	r5, r1, #3
 800396a:	f025 0503 	bic.w	r5, r5, #3
 800396e:	3508      	adds	r5, #8
 8003970:	2d0c      	cmp	r5, #12
 8003972:	bf38      	it	cc
 8003974:	250c      	movcc	r5, #12
 8003976:	2d00      	cmp	r5, #0
 8003978:	4607      	mov	r7, r0
 800397a:	db01      	blt.n	8003980 <_malloc_r+0x1c>
 800397c:	42a9      	cmp	r1, r5
 800397e:	d905      	bls.n	800398c <_malloc_r+0x28>
 8003980:	230c      	movs	r3, #12
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	2600      	movs	r6, #0
 8003986:	4630      	mov	r0, r6
 8003988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800398c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a60 <_malloc_r+0xfc>
 8003990:	f000 f868 	bl	8003a64 <__malloc_lock>
 8003994:	f8d8 3000 	ldr.w	r3, [r8]
 8003998:	461c      	mov	r4, r3
 800399a:	bb5c      	cbnz	r4, 80039f4 <_malloc_r+0x90>
 800399c:	4629      	mov	r1, r5
 800399e:	4638      	mov	r0, r7
 80039a0:	f7ff ffc0 	bl	8003924 <sbrk_aligned>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	4604      	mov	r4, r0
 80039a8:	d155      	bne.n	8003a56 <_malloc_r+0xf2>
 80039aa:	f8d8 4000 	ldr.w	r4, [r8]
 80039ae:	4626      	mov	r6, r4
 80039b0:	2e00      	cmp	r6, #0
 80039b2:	d145      	bne.n	8003a40 <_malloc_r+0xdc>
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	d048      	beq.n	8003a4a <_malloc_r+0xe6>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	4631      	mov	r1, r6
 80039bc:	4638      	mov	r0, r7
 80039be:	eb04 0903 	add.w	r9, r4, r3
 80039c2:	f000 fb5d 	bl	8004080 <_sbrk_r>
 80039c6:	4581      	cmp	r9, r0
 80039c8:	d13f      	bne.n	8003a4a <_malloc_r+0xe6>
 80039ca:	6821      	ldr	r1, [r4, #0]
 80039cc:	1a6d      	subs	r5, r5, r1
 80039ce:	4629      	mov	r1, r5
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7ff ffa7 	bl	8003924 <sbrk_aligned>
 80039d6:	3001      	adds	r0, #1
 80039d8:	d037      	beq.n	8003a4a <_malloc_r+0xe6>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	442b      	add	r3, r5
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	f8d8 3000 	ldr.w	r3, [r8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d038      	beq.n	8003a5a <_malloc_r+0xf6>
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	42a2      	cmp	r2, r4
 80039ec:	d12b      	bne.n	8003a46 <_malloc_r+0xe2>
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	e00f      	b.n	8003a14 <_malloc_r+0xb0>
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	1b52      	subs	r2, r2, r5
 80039f8:	d41f      	bmi.n	8003a3a <_malloc_r+0xd6>
 80039fa:	2a0b      	cmp	r2, #11
 80039fc:	d917      	bls.n	8003a2e <_malloc_r+0xca>
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	6025      	str	r5, [r4, #0]
 8003a04:	bf18      	it	ne
 8003a06:	6059      	strne	r1, [r3, #4]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	bf08      	it	eq
 8003a0c:	f8c8 1000 	streq.w	r1, [r8]
 8003a10:	5162      	str	r2, [r4, r5]
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	4638      	mov	r0, r7
 8003a16:	f104 060b 	add.w	r6, r4, #11
 8003a1a:	f000 f829 	bl	8003a70 <__malloc_unlock>
 8003a1e:	f026 0607 	bic.w	r6, r6, #7
 8003a22:	1d23      	adds	r3, r4, #4
 8003a24:	1af2      	subs	r2, r6, r3
 8003a26:	d0ae      	beq.n	8003986 <_malloc_r+0x22>
 8003a28:	1b9b      	subs	r3, r3, r6
 8003a2a:	50a3      	str	r3, [r4, r2]
 8003a2c:	e7ab      	b.n	8003986 <_malloc_r+0x22>
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	6862      	ldr	r2, [r4, #4]
 8003a32:	d1dd      	bne.n	80039f0 <_malloc_r+0x8c>
 8003a34:	f8c8 2000 	str.w	r2, [r8]
 8003a38:	e7ec      	b.n	8003a14 <_malloc_r+0xb0>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7ac      	b.n	800399a <_malloc_r+0x36>
 8003a40:	4634      	mov	r4, r6
 8003a42:	6876      	ldr	r6, [r6, #4]
 8003a44:	e7b4      	b.n	80039b0 <_malloc_r+0x4c>
 8003a46:	4613      	mov	r3, r2
 8003a48:	e7cc      	b.n	80039e4 <_malloc_r+0x80>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f000 f80e 	bl	8003a70 <__malloc_unlock>
 8003a54:	e797      	b.n	8003986 <_malloc_r+0x22>
 8003a56:	6025      	str	r5, [r4, #0]
 8003a58:	e7dc      	b.n	8003a14 <_malloc_r+0xb0>
 8003a5a:	605b      	str	r3, [r3, #4]
 8003a5c:	deff      	udf	#255	; 0xff
 8003a5e:	bf00      	nop
 8003a60:	20000398 	.word	0x20000398

08003a64 <__malloc_lock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <__malloc_lock+0x8>)
 8003a66:	f7ff bf0f 	b.w	8003888 <__retarget_lock_acquire_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	20000394 	.word	0x20000394

08003a70 <__malloc_unlock>:
 8003a70:	4801      	ldr	r0, [pc, #4]	; (8003a78 <__malloc_unlock+0x8>)
 8003a72:	f7ff bf0a 	b.w	800388a <__retarget_lock_release_recursive>
 8003a76:	bf00      	nop
 8003a78:	20000394 	.word	0x20000394

08003a7c <__ssputs_r>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	688e      	ldr	r6, [r1, #8]
 8003a82:	461f      	mov	r7, r3
 8003a84:	42be      	cmp	r6, r7
 8003a86:	680b      	ldr	r3, [r1, #0]
 8003a88:	4682      	mov	sl, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	4690      	mov	r8, r2
 8003a8e:	d82c      	bhi.n	8003aea <__ssputs_r+0x6e>
 8003a90:	898a      	ldrh	r2, [r1, #12]
 8003a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a96:	d026      	beq.n	8003ae6 <__ssputs_r+0x6a>
 8003a98:	6965      	ldr	r5, [r4, #20]
 8003a9a:	6909      	ldr	r1, [r1, #16]
 8003a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa0:	eba3 0901 	sub.w	r9, r3, r1
 8003aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aa8:	1c7b      	adds	r3, r7, #1
 8003aaa:	444b      	add	r3, r9
 8003aac:	106d      	asrs	r5, r5, #1
 8003aae:	429d      	cmp	r5, r3
 8003ab0:	bf38      	it	cc
 8003ab2:	461d      	movcc	r5, r3
 8003ab4:	0553      	lsls	r3, r2, #21
 8003ab6:	d527      	bpl.n	8003b08 <__ssputs_r+0x8c>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7ff ff53 	bl	8003964 <_malloc_r>
 8003abe:	4606      	mov	r6, r0
 8003ac0:	b360      	cbz	r0, 8003b1c <__ssputs_r+0xa0>
 8003ac2:	6921      	ldr	r1, [r4, #16]
 8003ac4:	464a      	mov	r2, r9
 8003ac6:	f000 faeb 	bl	80040a0 <memcpy>
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad4:	81a3      	strh	r3, [r4, #12]
 8003ad6:	6126      	str	r6, [r4, #16]
 8003ad8:	6165      	str	r5, [r4, #20]
 8003ada:	444e      	add	r6, r9
 8003adc:	eba5 0509 	sub.w	r5, r5, r9
 8003ae0:	6026      	str	r6, [r4, #0]
 8003ae2:	60a5      	str	r5, [r4, #8]
 8003ae4:	463e      	mov	r6, r7
 8003ae6:	42be      	cmp	r6, r7
 8003ae8:	d900      	bls.n	8003aec <__ssputs_r+0x70>
 8003aea:	463e      	mov	r6, r7
 8003aec:	6820      	ldr	r0, [r4, #0]
 8003aee:	4632      	mov	r2, r6
 8003af0:	4641      	mov	r1, r8
 8003af2:	f000 faab 	bl	800404c <memmove>
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	1b9b      	subs	r3, r3, r6
 8003afa:	60a3      	str	r3, [r4, #8]
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	4433      	add	r3, r6
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	2000      	movs	r0, #0
 8003b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b08:	462a      	mov	r2, r5
 8003b0a:	f000 fad7 	bl	80040bc <_realloc_r>
 8003b0e:	4606      	mov	r6, r0
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d1e0      	bne.n	8003ad6 <__ssputs_r+0x5a>
 8003b14:	6921      	ldr	r1, [r4, #16]
 8003b16:	4650      	mov	r0, sl
 8003b18:	f7ff feb8 	bl	800388c <_free_r>
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	f8ca 3000 	str.w	r3, [sl]
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2e:	e7e9      	b.n	8003b04 <__ssputs_r+0x88>

08003b30 <_svfiprintf_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	4698      	mov	r8, r3
 8003b36:	898b      	ldrh	r3, [r1, #12]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	b09d      	sub	sp, #116	; 0x74
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	460d      	mov	r5, r1
 8003b40:	4614      	mov	r4, r2
 8003b42:	d50e      	bpl.n	8003b62 <_svfiprintf_r+0x32>
 8003b44:	690b      	ldr	r3, [r1, #16]
 8003b46:	b963      	cbnz	r3, 8003b62 <_svfiprintf_r+0x32>
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	f7ff ff0b 	bl	8003964 <_malloc_r>
 8003b4e:	6028      	str	r0, [r5, #0]
 8003b50:	6128      	str	r0, [r5, #16]
 8003b52:	b920      	cbnz	r0, 8003b5e <_svfiprintf_r+0x2e>
 8003b54:	230c      	movs	r3, #12
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	e0d0      	b.n	8003d00 <_svfiprintf_r+0x1d0>
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	616b      	str	r3, [r5, #20]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	2320      	movs	r3, #32
 8003b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b70:	2330      	movs	r3, #48	; 0x30
 8003b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d18 <_svfiprintf_r+0x1e8>
 8003b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b7a:	f04f 0901 	mov.w	r9, #1
 8003b7e:	4623      	mov	r3, r4
 8003b80:	469a      	mov	sl, r3
 8003b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b86:	b10a      	cbz	r2, 8003b8c <_svfiprintf_r+0x5c>
 8003b88:	2a25      	cmp	r2, #37	; 0x25
 8003b8a:	d1f9      	bne.n	8003b80 <_svfiprintf_r+0x50>
 8003b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b90:	d00b      	beq.n	8003baa <_svfiprintf_r+0x7a>
 8003b92:	465b      	mov	r3, fp
 8003b94:	4622      	mov	r2, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f7ff ff6f 	bl	8003a7c <__ssputs_r>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	f000 80a9 	beq.w	8003cf6 <_svfiprintf_r+0x1c6>
 8003ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ba6:	445a      	add	r2, fp
 8003ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8003baa:	f89a 3000 	ldrb.w	r3, [sl]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80a1 	beq.w	8003cf6 <_svfiprintf_r+0x1c6>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bbe:	f10a 0a01 	add.w	sl, sl, #1
 8003bc2:	9304      	str	r3, [sp, #16]
 8003bc4:	9307      	str	r3, [sp, #28]
 8003bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bca:	931a      	str	r3, [sp, #104]	; 0x68
 8003bcc:	4654      	mov	r4, sl
 8003bce:	2205      	movs	r2, #5
 8003bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd4:	4850      	ldr	r0, [pc, #320]	; (8003d18 <_svfiprintf_r+0x1e8>)
 8003bd6:	f7fc fafb 	bl	80001d0 <memchr>
 8003bda:	9a04      	ldr	r2, [sp, #16]
 8003bdc:	b9d8      	cbnz	r0, 8003c16 <_svfiprintf_r+0xe6>
 8003bde:	06d0      	lsls	r0, r2, #27
 8003be0:	bf44      	itt	mi
 8003be2:	2320      	movmi	r3, #32
 8003be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003be8:	0711      	lsls	r1, r2, #28
 8003bea:	bf44      	itt	mi
 8003bec:	232b      	movmi	r3, #43	; 0x2b
 8003bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf8:	d015      	beq.n	8003c26 <_svfiprintf_r+0xf6>
 8003bfa:	9a07      	ldr	r2, [sp, #28]
 8003bfc:	4654      	mov	r4, sl
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f04f 0c0a 	mov.w	ip, #10
 8003c04:	4621      	mov	r1, r4
 8003c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0a:	3b30      	subs	r3, #48	; 0x30
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	d94d      	bls.n	8003cac <_svfiprintf_r+0x17c>
 8003c10:	b1b0      	cbz	r0, 8003c40 <_svfiprintf_r+0x110>
 8003c12:	9207      	str	r2, [sp, #28]
 8003c14:	e014      	b.n	8003c40 <_svfiprintf_r+0x110>
 8003c16:	eba0 0308 	sub.w	r3, r0, r8
 8003c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	9304      	str	r3, [sp, #16]
 8003c22:	46a2      	mov	sl, r4
 8003c24:	e7d2      	b.n	8003bcc <_svfiprintf_r+0x9c>
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	1d19      	adds	r1, r3, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	9103      	str	r1, [sp, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bfbb      	ittet	lt
 8003c32:	425b      	neglt	r3, r3
 8003c34:	f042 0202 	orrlt.w	r2, r2, #2
 8003c38:	9307      	strge	r3, [sp, #28]
 8003c3a:	9307      	strlt	r3, [sp, #28]
 8003c3c:	bfb8      	it	lt
 8003c3e:	9204      	strlt	r2, [sp, #16]
 8003c40:	7823      	ldrb	r3, [r4, #0]
 8003c42:	2b2e      	cmp	r3, #46	; 0x2e
 8003c44:	d10c      	bne.n	8003c60 <_svfiprintf_r+0x130>
 8003c46:	7863      	ldrb	r3, [r4, #1]
 8003c48:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4a:	d134      	bne.n	8003cb6 <_svfiprintf_r+0x186>
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	1d1a      	adds	r2, r3, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	9203      	str	r2, [sp, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bfb8      	it	lt
 8003c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c5c:	3402      	adds	r4, #2
 8003c5e:	9305      	str	r3, [sp, #20]
 8003c60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003d28 <_svfiprintf_r+0x1f8>
 8003c64:	7821      	ldrb	r1, [r4, #0]
 8003c66:	2203      	movs	r2, #3
 8003c68:	4650      	mov	r0, sl
 8003c6a:	f7fc fab1 	bl	80001d0 <memchr>
 8003c6e:	b138      	cbz	r0, 8003c80 <_svfiprintf_r+0x150>
 8003c70:	9b04      	ldr	r3, [sp, #16]
 8003c72:	eba0 000a 	sub.w	r0, r0, sl
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	4082      	lsls	r2, r0
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	3401      	adds	r4, #1
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c84:	4825      	ldr	r0, [pc, #148]	; (8003d1c <_svfiprintf_r+0x1ec>)
 8003c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c8a:	2206      	movs	r2, #6
 8003c8c:	f7fc faa0 	bl	80001d0 <memchr>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d038      	beq.n	8003d06 <_svfiprintf_r+0x1d6>
 8003c94:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <_svfiprintf_r+0x1f0>)
 8003c96:	bb1b      	cbnz	r3, 8003ce0 <_svfiprintf_r+0x1b0>
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	3307      	adds	r3, #7
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	9303      	str	r3, [sp, #12]
 8003ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca6:	4433      	add	r3, r6
 8003ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8003caa:	e768      	b.n	8003b7e <_svfiprintf_r+0x4e>
 8003cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	e7a6      	b.n	8003c04 <_svfiprintf_r+0xd4>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	3401      	adds	r4, #1
 8003cba:	9305      	str	r3, [sp, #20]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f04f 0c0a 	mov.w	ip, #10
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc8:	3a30      	subs	r2, #48	; 0x30
 8003cca:	2a09      	cmp	r2, #9
 8003ccc:	d903      	bls.n	8003cd6 <_svfiprintf_r+0x1a6>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0c6      	beq.n	8003c60 <_svfiprintf_r+0x130>
 8003cd2:	9105      	str	r1, [sp, #20]
 8003cd4:	e7c4      	b.n	8003c60 <_svfiprintf_r+0x130>
 8003cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cda:	4604      	mov	r4, r0
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e7f0      	b.n	8003cc2 <_svfiprintf_r+0x192>
 8003ce0:	ab03      	add	r3, sp, #12
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <_svfiprintf_r+0x1f4>)
 8003ce8:	a904      	add	r1, sp, #16
 8003cea:	4638      	mov	r0, r7
 8003cec:	f3af 8000 	nop.w
 8003cf0:	1c42      	adds	r2, r0, #1
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	d1d6      	bne.n	8003ca4 <_svfiprintf_r+0x174>
 8003cf6:	89ab      	ldrh	r3, [r5, #12]
 8003cf8:	065b      	lsls	r3, r3, #25
 8003cfa:	f53f af2d 	bmi.w	8003b58 <_svfiprintf_r+0x28>
 8003cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d00:	b01d      	add	sp, #116	; 0x74
 8003d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d06:	ab03      	add	r3, sp, #12
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	462a      	mov	r2, r5
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <_svfiprintf_r+0x1f4>)
 8003d0e:	a904      	add	r1, sp, #16
 8003d10:	4638      	mov	r0, r7
 8003d12:	f000 f879 	bl	8003e08 <_printf_i>
 8003d16:	e7eb      	b.n	8003cf0 <_svfiprintf_r+0x1c0>
 8003d18:	08004170 	.word	0x08004170
 8003d1c:	0800417a 	.word	0x0800417a
 8003d20:	00000000 	.word	0x00000000
 8003d24:	08003a7d 	.word	0x08003a7d
 8003d28:	08004176 	.word	0x08004176

08003d2c <_printf_common>:
 8003d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d30:	4616      	mov	r6, r2
 8003d32:	4699      	mov	r9, r3
 8003d34:	688a      	ldr	r2, [r1, #8]
 8003d36:	690b      	ldr	r3, [r1, #16]
 8003d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bfb8      	it	lt
 8003d40:	4613      	movlt	r3, r2
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d48:	4607      	mov	r7, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	b10a      	cbz	r2, 8003d52 <_printf_common+0x26>
 8003d4e:	3301      	adds	r3, #1
 8003d50:	6033      	str	r3, [r6, #0]
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	0699      	lsls	r1, r3, #26
 8003d56:	bf42      	ittt	mi
 8003d58:	6833      	ldrmi	r3, [r6, #0]
 8003d5a:	3302      	addmi	r3, #2
 8003d5c:	6033      	strmi	r3, [r6, #0]
 8003d5e:	6825      	ldr	r5, [r4, #0]
 8003d60:	f015 0506 	ands.w	r5, r5, #6
 8003d64:	d106      	bne.n	8003d74 <_printf_common+0x48>
 8003d66:	f104 0a19 	add.w	sl, r4, #25
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	6832      	ldr	r2, [r6, #0]
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dc26      	bgt.n	8003dc2 <_printf_common+0x96>
 8003d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d78:	1e13      	subs	r3, r2, #0
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	0692      	lsls	r2, r2, #26
 8003d82:	d42b      	bmi.n	8003ddc <_printf_common+0xb0>
 8003d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d88:	4649      	mov	r1, r9
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	47c0      	blx	r8
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d01e      	beq.n	8003dd0 <_printf_common+0xa4>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	6922      	ldr	r2, [r4, #16]
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf02      	ittt	eq
 8003d9e:	68e5      	ldreq	r5, [r4, #12]
 8003da0:	6833      	ldreq	r3, [r6, #0]
 8003da2:	1aed      	subeq	r5, r5, r3
 8003da4:	68a3      	ldr	r3, [r4, #8]
 8003da6:	bf0c      	ite	eq
 8003da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dac:	2500      	movne	r5, #0
 8003dae:	4293      	cmp	r3, r2
 8003db0:	bfc4      	itt	gt
 8003db2:	1a9b      	subgt	r3, r3, r2
 8003db4:	18ed      	addgt	r5, r5, r3
 8003db6:	2600      	movs	r6, #0
 8003db8:	341a      	adds	r4, #26
 8003dba:	42b5      	cmp	r5, r6
 8003dbc:	d11a      	bne.n	8003df4 <_printf_common+0xc8>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e008      	b.n	8003dd4 <_printf_common+0xa8>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4652      	mov	r2, sl
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4638      	mov	r0, r7
 8003dca:	47c0      	blx	r8
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d103      	bne.n	8003dd8 <_printf_common+0xac>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	3501      	adds	r5, #1
 8003dda:	e7c6      	b.n	8003d6a <_printf_common+0x3e>
 8003ddc:	18e1      	adds	r1, r4, r3
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	2030      	movs	r0, #48	; 0x30
 8003de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003de6:	4422      	add	r2, r4
 8003de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003df0:	3302      	adds	r3, #2
 8003df2:	e7c7      	b.n	8003d84 <_printf_common+0x58>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4622      	mov	r2, r4
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47c0      	blx	r8
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d0e6      	beq.n	8003dd0 <_printf_common+0xa4>
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7d9      	b.n	8003dba <_printf_common+0x8e>
	...

08003e08 <_printf_i>:
 8003e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	7e0f      	ldrb	r7, [r1, #24]
 8003e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e10:	2f78      	cmp	r7, #120	; 0x78
 8003e12:	4691      	mov	r9, r2
 8003e14:	4680      	mov	r8, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	469a      	mov	sl, r3
 8003e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e1e:	d807      	bhi.n	8003e30 <_printf_i+0x28>
 8003e20:	2f62      	cmp	r7, #98	; 0x62
 8003e22:	d80a      	bhi.n	8003e3a <_printf_i+0x32>
 8003e24:	2f00      	cmp	r7, #0
 8003e26:	f000 80d4 	beq.w	8003fd2 <_printf_i+0x1ca>
 8003e2a:	2f58      	cmp	r7, #88	; 0x58
 8003e2c:	f000 80c0 	beq.w	8003fb0 <_printf_i+0x1a8>
 8003e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e38:	e03a      	b.n	8003eb0 <_printf_i+0xa8>
 8003e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e3e:	2b15      	cmp	r3, #21
 8003e40:	d8f6      	bhi.n	8003e30 <_printf_i+0x28>
 8003e42:	a101      	add	r1, pc, #4	; (adr r1, 8003e48 <_printf_i+0x40>)
 8003e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003e31 	.word	0x08003e31
 8003e54:	08003e31 	.word	0x08003e31
 8003e58:	08003e31 	.word	0x08003e31
 8003e5c:	08003e31 	.word	0x08003e31
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003e31 	.word	0x08003e31
 8003e68:	08003e31 	.word	0x08003e31
 8003e6c:	08003e31 	.word	0x08003e31
 8003e70:	08003e31 	.word	0x08003e31
 8003e74:	08003fb9 	.word	0x08003fb9
 8003e78:	08003ee1 	.word	0x08003ee1
 8003e7c:	08003f73 	.word	0x08003f73
 8003e80:	08003e31 	.word	0x08003e31
 8003e84:	08003e31 	.word	0x08003e31
 8003e88:	08003fdb 	.word	0x08003fdb
 8003e8c:	08003e31 	.word	0x08003e31
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	08003e31 	.word	0x08003e31
 8003e98:	08003e31 	.word	0x08003e31
 8003e9c:	08003f7b 	.word	0x08003f7b
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e09f      	b.n	8003ff4 <_printf_i+0x1ec>
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	682b      	ldr	r3, [r5, #0]
 8003eb8:	0607      	lsls	r7, r0, #24
 8003eba:	f103 0104 	add.w	r1, r3, #4
 8003ebe:	6029      	str	r1, [r5, #0]
 8003ec0:	d501      	bpl.n	8003ec6 <_printf_i+0xbe>
 8003ec2:	681e      	ldr	r6, [r3, #0]
 8003ec4:	e003      	b.n	8003ece <_printf_i+0xc6>
 8003ec6:	0646      	lsls	r6, r0, #25
 8003ec8:	d5fb      	bpl.n	8003ec2 <_printf_i+0xba>
 8003eca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	da03      	bge.n	8003eda <_printf_i+0xd2>
 8003ed2:	232d      	movs	r3, #45	; 0x2d
 8003ed4:	4276      	negs	r6, r6
 8003ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eda:	485a      	ldr	r0, [pc, #360]	; (8004044 <_printf_i+0x23c>)
 8003edc:	230a      	movs	r3, #10
 8003ede:	e012      	b.n	8003f06 <_printf_i+0xfe>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	1d19      	adds	r1, r3, #4
 8003ee6:	6029      	str	r1, [r5, #0]
 8003ee8:	0605      	lsls	r5, r0, #24
 8003eea:	d501      	bpl.n	8003ef0 <_printf_i+0xe8>
 8003eec:	681e      	ldr	r6, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <_printf_i+0xee>
 8003ef0:	0641      	lsls	r1, r0, #25
 8003ef2:	d5fb      	bpl.n	8003eec <_printf_i+0xe4>
 8003ef4:	881e      	ldrh	r6, [r3, #0]
 8003ef6:	4853      	ldr	r0, [pc, #332]	; (8004044 <_printf_i+0x23c>)
 8003ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8003efa:	bf0c      	ite	eq
 8003efc:	2308      	moveq	r3, #8
 8003efe:	230a      	movne	r3, #10
 8003f00:	2100      	movs	r1, #0
 8003f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f06:	6865      	ldr	r5, [r4, #4]
 8003f08:	60a5      	str	r5, [r4, #8]
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	bfa2      	ittt	ge
 8003f0e:	6821      	ldrge	r1, [r4, #0]
 8003f10:	f021 0104 	bicge.w	r1, r1, #4
 8003f14:	6021      	strge	r1, [r4, #0]
 8003f16:	b90e      	cbnz	r6, 8003f1c <_printf_i+0x114>
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	d04b      	beq.n	8003fb4 <_printf_i+0x1ac>
 8003f1c:	4615      	mov	r5, r2
 8003f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f22:	fb03 6711 	mls	r7, r3, r1, r6
 8003f26:	5dc7      	ldrb	r7, [r0, r7]
 8003f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f2c:	4637      	mov	r7, r6
 8003f2e:	42bb      	cmp	r3, r7
 8003f30:	460e      	mov	r6, r1
 8003f32:	d9f4      	bls.n	8003f1e <_printf_i+0x116>
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d10b      	bne.n	8003f50 <_printf_i+0x148>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	07de      	lsls	r6, r3, #31
 8003f3c:	d508      	bpl.n	8003f50 <_printf_i+0x148>
 8003f3e:	6923      	ldr	r3, [r4, #16]
 8003f40:	6861      	ldr	r1, [r4, #4]
 8003f42:	4299      	cmp	r1, r3
 8003f44:	bfde      	ittt	le
 8003f46:	2330      	movle	r3, #48	; 0x30
 8003f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f50:	1b52      	subs	r2, r2, r5
 8003f52:	6122      	str	r2, [r4, #16]
 8003f54:	f8cd a000 	str.w	sl, [sp]
 8003f58:	464b      	mov	r3, r9
 8003f5a:	aa03      	add	r2, sp, #12
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4640      	mov	r0, r8
 8003f60:	f7ff fee4 	bl	8003d2c <_printf_common>
 8003f64:	3001      	adds	r0, #1
 8003f66:	d14a      	bne.n	8003ffe <_printf_i+0x1f6>
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	b004      	add	sp, #16
 8003f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	f043 0320 	orr.w	r3, r3, #32
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	4833      	ldr	r0, [pc, #204]	; (8004048 <_printf_i+0x240>)
 8003f7c:	2778      	movs	r7, #120	; 0x78
 8003f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	6829      	ldr	r1, [r5, #0]
 8003f86:	061f      	lsls	r7, r3, #24
 8003f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f8c:	d402      	bmi.n	8003f94 <_printf_i+0x18c>
 8003f8e:	065f      	lsls	r7, r3, #25
 8003f90:	bf48      	it	mi
 8003f92:	b2b6      	uxthmi	r6, r6
 8003f94:	07df      	lsls	r7, r3, #31
 8003f96:	bf48      	it	mi
 8003f98:	f043 0320 	orrmi.w	r3, r3, #32
 8003f9c:	6029      	str	r1, [r5, #0]
 8003f9e:	bf48      	it	mi
 8003fa0:	6023      	strmi	r3, [r4, #0]
 8003fa2:	b91e      	cbnz	r6, 8003fac <_printf_i+0x1a4>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f023 0320 	bic.w	r3, r3, #32
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	2310      	movs	r3, #16
 8003fae:	e7a7      	b.n	8003f00 <_printf_i+0xf8>
 8003fb0:	4824      	ldr	r0, [pc, #144]	; (8004044 <_printf_i+0x23c>)
 8003fb2:	e7e4      	b.n	8003f7e <_printf_i+0x176>
 8003fb4:	4615      	mov	r5, r2
 8003fb6:	e7bd      	b.n	8003f34 <_printf_i+0x12c>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	6826      	ldr	r6, [r4, #0]
 8003fbc:	6961      	ldr	r1, [r4, #20]
 8003fbe:	1d18      	adds	r0, r3, #4
 8003fc0:	6028      	str	r0, [r5, #0]
 8003fc2:	0635      	lsls	r5, r6, #24
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	d501      	bpl.n	8003fcc <_printf_i+0x1c4>
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	e002      	b.n	8003fd2 <_printf_i+0x1ca>
 8003fcc:	0670      	lsls	r0, r6, #25
 8003fce:	d5fb      	bpl.n	8003fc8 <_printf_i+0x1c0>
 8003fd0:	8019      	strh	r1, [r3, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6123      	str	r3, [r4, #16]
 8003fd6:	4615      	mov	r5, r2
 8003fd8:	e7bc      	b.n	8003f54 <_printf_i+0x14c>
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	1d1a      	adds	r2, r3, #4
 8003fde:	602a      	str	r2, [r5, #0]
 8003fe0:	681d      	ldr	r5, [r3, #0]
 8003fe2:	6862      	ldr	r2, [r4, #4]
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f7fc f8f2 	bl	80001d0 <memchr>
 8003fec:	b108      	cbz	r0, 8003ff2 <_printf_i+0x1ea>
 8003fee:	1b40      	subs	r0, r0, r5
 8003ff0:	6060      	str	r0, [r4, #4]
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	6123      	str	r3, [r4, #16]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffc:	e7aa      	b.n	8003f54 <_printf_i+0x14c>
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	462a      	mov	r2, r5
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	47d0      	blx	sl
 8004008:	3001      	adds	r0, #1
 800400a:	d0ad      	beq.n	8003f68 <_printf_i+0x160>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	079b      	lsls	r3, r3, #30
 8004010:	d413      	bmi.n	800403a <_printf_i+0x232>
 8004012:	68e0      	ldr	r0, [r4, #12]
 8004014:	9b03      	ldr	r3, [sp, #12]
 8004016:	4298      	cmp	r0, r3
 8004018:	bfb8      	it	lt
 800401a:	4618      	movlt	r0, r3
 800401c:	e7a6      	b.n	8003f6c <_printf_i+0x164>
 800401e:	2301      	movs	r3, #1
 8004020:	4632      	mov	r2, r6
 8004022:	4649      	mov	r1, r9
 8004024:	4640      	mov	r0, r8
 8004026:	47d0      	blx	sl
 8004028:	3001      	adds	r0, #1
 800402a:	d09d      	beq.n	8003f68 <_printf_i+0x160>
 800402c:	3501      	adds	r5, #1
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	9903      	ldr	r1, [sp, #12]
 8004032:	1a5b      	subs	r3, r3, r1
 8004034:	42ab      	cmp	r3, r5
 8004036:	dcf2      	bgt.n	800401e <_printf_i+0x216>
 8004038:	e7eb      	b.n	8004012 <_printf_i+0x20a>
 800403a:	2500      	movs	r5, #0
 800403c:	f104 0619 	add.w	r6, r4, #25
 8004040:	e7f5      	b.n	800402e <_printf_i+0x226>
 8004042:	bf00      	nop
 8004044:	08004181 	.word	0x08004181
 8004048:	08004192 	.word	0x08004192

0800404c <memmove>:
 800404c:	4288      	cmp	r0, r1
 800404e:	b510      	push	{r4, lr}
 8004050:	eb01 0402 	add.w	r4, r1, r2
 8004054:	d902      	bls.n	800405c <memmove+0x10>
 8004056:	4284      	cmp	r4, r0
 8004058:	4623      	mov	r3, r4
 800405a:	d807      	bhi.n	800406c <memmove+0x20>
 800405c:	1e43      	subs	r3, r0, #1
 800405e:	42a1      	cmp	r1, r4
 8004060:	d008      	beq.n	8004074 <memmove+0x28>
 8004062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800406a:	e7f8      	b.n	800405e <memmove+0x12>
 800406c:	4402      	add	r2, r0
 800406e:	4601      	mov	r1, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	d100      	bne.n	8004076 <memmove+0x2a>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800407a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407e:	e7f7      	b.n	8004070 <memmove+0x24>

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	; (800409c <_sbrk_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fe88 	bl	8000da0 <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000390 	.word	0x20000390

080040a0 <memcpy>:
 80040a0:	440a      	add	r2, r1
 80040a2:	4291      	cmp	r1, r2
 80040a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a8:	d100      	bne.n	80040ac <memcpy+0xc>
 80040aa:	4770      	bx	lr
 80040ac:	b510      	push	{r4, lr}
 80040ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b6:	4291      	cmp	r1, r2
 80040b8:	d1f9      	bne.n	80040ae <memcpy+0xe>
 80040ba:	bd10      	pop	{r4, pc}

080040bc <_realloc_r>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	4680      	mov	r8, r0
 80040c2:	4614      	mov	r4, r2
 80040c4:	460e      	mov	r6, r1
 80040c6:	b921      	cbnz	r1, 80040d2 <_realloc_r+0x16>
 80040c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040cc:	4611      	mov	r1, r2
 80040ce:	f7ff bc49 	b.w	8003964 <_malloc_r>
 80040d2:	b92a      	cbnz	r2, 80040e0 <_realloc_r+0x24>
 80040d4:	f7ff fbda 	bl	800388c <_free_r>
 80040d8:	4625      	mov	r5, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	f000 f81b 	bl	800411a <_malloc_usable_size_r>
 80040e4:	4284      	cmp	r4, r0
 80040e6:	4607      	mov	r7, r0
 80040e8:	d802      	bhi.n	80040f0 <_realloc_r+0x34>
 80040ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040ee:	d812      	bhi.n	8004116 <_realloc_r+0x5a>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7ff fc36 	bl	8003964 <_malloc_r>
 80040f8:	4605      	mov	r5, r0
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0ed      	beq.n	80040da <_realloc_r+0x1e>
 80040fe:	42bc      	cmp	r4, r7
 8004100:	4622      	mov	r2, r4
 8004102:	4631      	mov	r1, r6
 8004104:	bf28      	it	cs
 8004106:	463a      	movcs	r2, r7
 8004108:	f7ff ffca 	bl	80040a0 <memcpy>
 800410c:	4631      	mov	r1, r6
 800410e:	4640      	mov	r0, r8
 8004110:	f7ff fbbc 	bl	800388c <_free_r>
 8004114:	e7e1      	b.n	80040da <_realloc_r+0x1e>
 8004116:	4635      	mov	r5, r6
 8004118:	e7df      	b.n	80040da <_realloc_r+0x1e>

0800411a <_malloc_usable_size_r>:
 800411a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411e:	1f18      	subs	r0, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfbc      	itt	lt
 8004124:	580b      	ldrlt	r3, [r1, r0]
 8004126:	18c0      	addlt	r0, r0, r3
 8004128:	4770      	bx	lr
	...

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
